/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package randomizer.Pokemon_TCG;

import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileFilter;

import randomizer.RandomizerUI;

/**
 *
 * @author Andrew
 */
public class PTCG1_UI extends RandomizerUI {

    Path lastPresetSettingSavefile = Paths.get("./lastPresetSettings.txt");
    String lastPresetLocation = "";
    String lastPresetStartText = "Only updates when loading preset - ";

    /**
     * Creates new form PTCG1_UI
     */
    public PTCG1_UI() {
	initComponents();

	if (Files.exists(lastPresetSettingSavefile)) {
	    try {
		lastPresetLocation = new String(Files.readAllBytes(lastPresetSettingSavefile));
		useLastPreset.setToolTipText(lastPresetStartText + lastPresetLocation);
	    } catch (IOException ex) {
		Logger.getLogger(PTCG1_UI.class.getName()).log(Level.SEVERE, null, ex);
	    }
	} else {
	    useLastPreset.setToolTipText(lastPresetStartText + "No Remembered Preset");
	}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moveCost_buttons = new javax.swing.ButtonGroup();
        randomizeMovesGroup = new javax.swing.ButtonGroup();
        metronomeMoves = new javax.swing.ButtonGroup();
        tabs = new javax.swing.JTabbedPane();
        prepatch_panel = new javax.swing.JPanel();
        deleteInvisibleWall = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        movesCostSame = new javax.swing.JRadioButton();
        movesCostColorless = new javax.swing.JRadioButton();
        movesCostNothing = new javax.swing.JRadioButton();
        jSeparator2 = new javax.swing.JSeparator();
        sanquiTutorialPatch = new javax.swing.JCheckBox();
        deleteMetronome = new javax.swing.JRadioButton();
        setMetronomeAmount = new javax.swing.JRadioButton();
        metronomeAmount = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        startWithInstantText = new javax.swing.JCheckBox();
        startWithNoAnimations = new javax.swing.JCheckBox();
        removeRetreatCost = new javax.swing.JCheckBox();
        dontChangeMetronome = new javax.swing.JRadioButton();
        randomize_panel = new javax.swing.JPanel();
        randomizeHealth = new javax.swing.JCheckBox();
        healthLow = new javax.swing.JSpinner();
        healthHigh = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        dontRandomizeMoves = new javax.swing.JRadioButton();
        randomizeMovesInStages = new javax.swing.JRadioButton();
        randomizeMovesFully = new javax.swing.JRadioButton();
        allowGlitchHPs = new javax.swing.JCheckBox();
        evosHaveMoreHP = new javax.swing.JCheckBox();
        randomizeWeakness = new javax.swing.JCheckBox();
        randomizeResistance = new javax.swing.JCheckBox();
        randomizeRetreatCost = new javax.swing.JCheckBox();
        randomizePokemonTypes = new javax.swing.JCheckBox();
        jSeparator4 = new javax.swing.JSeparator();
        movesCostSameAsType = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        preserveStarterDecks = new javax.swing.JCheckBox();
        randomizeDecks = new javax.swing.JCheckBox();
        randomizeSets = new javax.swing.JCheckBox();
        changePromoCards = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        randomizeWarps = new javax.swing.JCheckBox();
        randomizeEvolutions = new javax.swing.JCheckBox();
        keepEvolutionsMonotype = new javax.swing.JCheckBox();
        setMaxEvolutionChain = new javax.swing.JCheckBox();
        maxEvolutionChainValue = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        saveRom = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        textSeed = new javax.swing.JTextField();
        savePreset = new javax.swing.JButton();
        loadPreset = new javax.swing.JButton();
        useLastPreset = new javax.swing.JCheckBox();

        deleteInvisibleWall.setText("Delete Mr. Mime's Invisible Wall ability");
        deleteInvisibleWall.setToolTipText("Note: only Mr. Mime can use this ability anywa");

        moveCost_buttons.add(movesCostSame);
        movesCostSame.setSelected(true);
        movesCostSame.setText("Don't change move costs");
        movesCostSame.setToolTipText("Do you really need a tool tip for this one?");

        moveCost_buttons.add(movesCostColorless);
        movesCostColorless.setText("Make moves cost colorless energy");
        movesCostColorless.setToolTipText("All energy costs will be replaced with an equal amount of colorless energy");

        moveCost_buttons.add(movesCostNothing);
        movesCostNothing.setText("Make moves cost nothing");
        movesCostNothing.setToolTipText("All energy costs will appear to be \"poison\"");

        sanquiTutorialPatch.setSelected(true);
        sanquiTutorialPatch.setText("Remove Tutorial");
        sanquiTutorialPatch.setToolTipText("Credit: Sanquii");

        metronomeMoves.add(deleteMetronome);
        deleteMetronome.setText("Delete Metronome");
        deleteMetronome.setToolTipText("Removes Metronome for more \"Hardcore\" players");
        deleteMetronome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMetronomeActionPerformed(evt);
            }
        });

        metronomeMoves.add(setMetronomeAmount);
        setMetronomeAmount.setText("Set Metronome Amount");
        setMetronomeAmount.setToolTipText("If amount >1, will replace random moves with metronome");
        setMetronomeAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMetronomeAmountActionPerformed(evt);
            }
        });

        metronomeAmount.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        metronomeAmount.setText("2");
        metronomeAmount.setToolTipText("If this isn't an integer the randomizer will crash and you will deserve it");
        metronomeAmount.setEnabled(false);

        jLabel4.setText("Amount:");

        startWithInstantText.setSelected(true);
        startWithInstantText.setText("Start With Fast Text");
        startWithInstantText.setToolTipText("Vroom Vroom. Doesn't change animations becuase I couldn't figure out where that was set");

        startWithNoAnimations.setSelected(true);
        startWithNoAnimations.setText("Start With No Animations");
        startWithNoAnimations.setToolTipText("Starts a new game with animations set to off");
        startWithNoAnimations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startWithNoAnimationsActionPerformed(evt);
            }
        });

        removeRetreatCost.setText("Remove Retreat Cost");
        removeRetreatCost.setToolTipText("Sets retreat cost for every mon to zero. Out prioritizes randomized retreat cost.");

        metronomeMoves.add(dontChangeMetronome);
        dontChangeMetronome.setSelected(true);
        dontChangeMetronome.setText("Don't Change Metronome");
        dontChangeMetronome.setToolTipText("");
        dontChangeMetronome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dontChangeMetronomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout prepatch_panelLayout = new javax.swing.GroupLayout(prepatch_panel);
        prepatch_panel.setLayout(prepatch_panelLayout);
        prepatch_panelLayout.setHorizontalGroup(
            prepatch_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator2)
            .addGroup(prepatch_panelLayout.createSequentialGroup()
                .addComponent(deleteInvisibleWall, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(119, 119, 119))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, prepatch_panelLayout.createSequentialGroup()
                .addGroup(prepatch_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(movesCostSame)
                    .addComponent(movesCostColorless))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(prepatch_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(removeRetreatCost)
                    .addComponent(movesCostNothing))
                .addGap(40, 40, 40))
            .addGroup(prepatch_panelLayout.createSequentialGroup()
                .addComponent(dontChangeMetronome)
                .addGroup(prepatch_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(prepatch_panelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(metronomeAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(prepatch_panelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(setMetronomeAmount)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(prepatch_panelLayout.createSequentialGroup()
                .addGroup(prepatch_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteMetronome)
                    .addGroup(prepatch_panelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(prepatch_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startWithNoAnimations)
                            .addGroup(prepatch_panelLayout.createSequentialGroup()
                                .addComponent(sanquiTutorialPatch)
                                .addGap(18, 18, 18)
                                .addComponent(startWithInstantText)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        prepatch_panelLayout.setVerticalGroup(
            prepatch_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(prepatch_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deleteInvisibleWall)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(prepatch_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setMetronomeAmount)
                    .addComponent(dontChangeMetronome))
                .addGap(2, 2, 2)
                .addGroup(prepatch_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(metronomeAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(deleteMetronome))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(prepatch_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(movesCostSame)
                    .addComponent(movesCostNothing))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(prepatch_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(movesCostColorless)
                    .addComponent(removeRetreatCost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(prepatch_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sanquiTutorialPatch)
                    .addComponent(startWithInstantText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startWithNoAnimations)
                .addContainerGap())
        );

        tabs.addTab("Prepatch", prepatch_panel);

        randomizeHealth.setText("Randomize Pokemon health");
        randomizeHealth.setToolTipText("On the range set below.");
        randomizeHealth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomizeHealthActionPerformed(evt);
            }
        });

        healthLow.setModel(new javax.swing.SpinnerNumberModel(10, 10, 120, 10));
        healthLow.setEnabled(false);
        healthLow.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                healthLowStateChanged(evt);
            }
        });

        healthHigh.setModel(new javax.swing.SpinnerNumberModel(120, 10, 120, 10));
        healthHigh.setEnabled(false);
        healthHigh.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                healthHighStateChanged(evt);
            }
        });

        jLabel1.setText("Min:");

        jLabel2.setText("Max:");

        randomizeMovesGroup.add(dontRandomizeMoves);
        dontRandomizeMoves.setSelected(true);
        dontRandomizeMoves.setText("Don't randomize moves");
        dontRandomizeMoves.setToolTipText("Keep all moves the same");

        randomizeMovesGroup.add(randomizeMovesInStages);
        randomizeMovesInStages.setText("Randomize moves withing stage");
        randomizeMovesInStages.setToolTipText("randomize moves, but make sure pokemon only get moves from others in the same stage");

        randomizeMovesGroup.add(randomizeMovesFully);
        randomizeMovesFully.setText("Randomize moves fully");
        randomizeMovesFully.setToolTipText("Ignore stages, any pokemon can get any moves");

        allowGlitchHPs.setText("Allow Glitch HPs");
        allowGlitchHPs.setToolTipText("This is a silly feature added on request");
        allowGlitchHPs.setEnabled(false);

        evosHaveMoreHP.setSelected(true);
        evosHaveMoreHP.setText("Fix Evolution HP Distribution Bug");
        evosHaveMoreHP.setToolTipText("Evolutions have >= health of lower form");

        randomizeWeakness.setText("Randomize Weakness");

        randomizeResistance.setText("Randomize Resistance");

        randomizeRetreatCost.setText("Randomize Retreat Cost");

        randomizePokemonTypes.setText("Randomize Pokemon Types");

        movesCostSameAsType.setText("Make Moves Cost Same As Type");
        movesCostSameAsType.setToolTipText("If Move costs aren't modified in the prepatch tab, this will set the type requirement to be the same as the type of pokemon this is on");

        javax.swing.GroupLayout randomize_panelLayout = new javax.swing.GroupLayout(randomize_panel);
        randomize_panel.setLayout(randomize_panelLayout);
        randomize_panelLayout.setHorizontalGroup(
            randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator3)
            .addGroup(randomize_panelLayout.createSequentialGroup()
                .addGroup(randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4)
                    .addGroup(randomize_panelLayout.createSequentialGroup()
                        .addGroup(randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(randomize_panelLayout.createSequentialGroup()
                                .addGroup(randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(randomizeRetreatCost)
                                    .addComponent(randomizeWeakness))
                                .addGap(35, 35, 35)
                                .addGroup(randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(randomizePokemonTypes)
                                    .addComponent(randomizeResistance)))
                            .addGroup(randomize_panelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(healthLow, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(healthHigh, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addComponent(allowGlitchHPs))
                            .addGroup(randomize_panelLayout.createSequentialGroup()
                                .addComponent(randomizeHealth)
                                .addGap(18, 18, 18)
                                .addComponent(evosHaveMoreHP))
                            .addGroup(randomize_panelLayout.createSequentialGroup()
                                .addGroup(randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(randomizeMovesInStages)
                                    .addComponent(dontRandomizeMoves))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(randomizeMovesFully)
                                    .addComponent(movesCostSameAsType))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        randomize_panelLayout.setVerticalGroup(
            randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(randomize_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randomizeHealth)
                    .addComponent(evosHaveMoreHP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(healthLow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(healthHigh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(allowGlitchHPs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randomizeWeakness)
                    .addComponent(randomizeResistance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randomizeRetreatCost)
                    .addComponent(randomizePokemonTypes))
                .addGap(25, 25, 25)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dontRandomizeMoves)
                    .addComponent(randomizeMovesFully))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(randomize_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randomizeMovesInStages)
                    .addComponent(movesCostSameAsType))
                .addGap(30, 30, 30))
        );

        tabs.addTab("Randomize Card Data", randomize_panel);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        preserveStarterDecks.setText("Don't Randomize Starter Decks");
        preserveStarterDecks.setToolTipText("Keeps starter decks constant so you always have your deck and a trunk");
        preserveStarterDecks.setEnabled(false);
        preserveStarterDecks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preserveStarterDecksActionPerformed(evt);
            }
        });

        randomizeDecks.setText("Randomize decks");
        randomizeDecks.setToolTipText("Randomizes preconstructed decks");
        randomizeDecks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomizeDecksActionPerformed(evt);
            }
        });

        randomizeSets.setText("Randomize booster packs");
        randomizeSets.setToolTipText("Randomize what set each pokemon comes from");
        randomizeSets.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        randomizeSets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomizeSetsActionPerformed(evt);
            }
        });

        changePromoCards.setText("Change Promo Cards");
        changePromoCards.setToolTipText("If selected, promos are randomized and any source of promos (Ronald, Legendary Cards, etc) is updated");
        changePromoCards.setEnabled(false);
        changePromoCards.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePromoCardsActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("ABOVE IS A WIP (HOVER)");
        jLabel8.setToolTipText("\"Change Promo Cards\" is a work in progress. Every source of promo codes has to be updated for every source of promos. Check the Github Repo to see what's been updated so far");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(preserveStarterDecks)
                .addGap(18, 18, 18)
                .addComponent(changePromoCards)
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel8))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(randomizeDecks)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(randomizeSets)))
                .addGap(19, 19, 19))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randomizeDecks)
                    .addComponent(randomizeSets))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(preserveStarterDecks)
                    .addComponent(changePromoCards))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setText("Suggest ideas by emailing me at Aroymart@gmail.com");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabs.addTab("Randomize Card Sources", jPanel2);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        randomizeWarps.setText("Randomize Warps");
        randomizeWarps.setToolTipText("Randomizes entrance/exit warps. Not a good idea");

        randomizeEvolutions.setText("Randomize Evolutions");
        randomizeEvolutions.setToolTipText("Allows for randomized evolutions. BREAKS MOVE RADNOMIZATION WITHIN STAGE");
        randomizeEvolutions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomizeEvolutionsActionPerformed(evt);
            }
        });

        keepEvolutionsMonotype.setText("Monotype Evolution Chain");
        keepEvolutionsMonotype.setToolTipText("Generated after types are modified.");
        keepEvolutionsMonotype.setEnabled(false);

        setMaxEvolutionChain.setText("Set Max Evolution Size:");
        setMaxEvolutionChain.setToolTipText("If selected, sets evolution chains between 1 and value in the textbox");
        setMaxEvolutionChain.setEnabled(false);

        maxEvolutionChainValue.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        maxEvolutionChainValue.setText("3");
        maxEvolutionChainValue.setToolTipText("if <1 or not a number, sets evolution size to infinite");
        maxEvolutionChainValue.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("THESE MAY BREAK SOMETHING.");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(keepEvolutionsMonotype)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(setMaxEvolutionChain)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxEvolutionChainValue, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(randomizeWarps)
                            .addComponent(randomizeEvolutions))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(randomizeWarps)
                .addGap(36, 36, 36)
                .addComponent(randomizeEvolutions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keepEvolutionsMonotype)
                    .addComponent(setMaxEvolutionChain)
                    .addComponent(maxEvolutionChainValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabs.addTab("Other", jPanel3);

        saveRom.setText("Save Rom");
        saveRom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveRomActionPerformed(evt);
            }
        });

        jLabel3.setText("Seed:");

        savePreset.setText("Save Preset");
        savePreset.setToolTipText("Create a preset file so you don't have to do the same settings over and over again!");
        savePreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePresetActionPerformed(evt);
            }
        });

        loadPreset.setText("Load Preset");
        loadPreset.setToolTipText("Very Picky - will break if preset file isn't valid");
        loadPreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadPresetActionPerformed(evt);
            }
        });

        useLastPreset.setSelected(true);
        useLastPreset.setText("Use Last Preset (hover)");
        useLastPreset.setToolTipText("");
        useLastPreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useLastPresetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textSeed, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveRom)
                        .addGap(28, 28, 28))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(savePreset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadPreset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(useLastPreset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(savePreset)
                    .addComponent(loadPreset)
                    .addComponent(useLastPreset))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textSeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(saveRom))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void saveRomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRomActionPerformed
	    saveRom();
	}//GEN-LAST:event_saveRomActionPerformed

	private void preserveStarterDecksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preserveStarterDecksActionPerformed
	    // TODO add your handling code here:
	}//GEN-LAST:event_preserveStarterDecksActionPerformed

	private void randomizeEvolutionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomizeEvolutionsActionPerformed
	    // TODO add your handling code here:
	    keepEvolutionsMonotype.setEnabled(randomizeEvolutions.isSelected());
	    setMaxEvolutionChain.setEnabled(randomizeEvolutions.isSelected());
	    maxEvolutionChainValue.setEnabled(randomizeEvolutions.isSelected());
	}//GEN-LAST:event_randomizeEvolutionsActionPerformed

    private void savePresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePresetActionPerformed
	// TODO add your handling code here:
	JFileChooser guiStateSaveChooser = new JFileChooser();
	FileFilter ff = new FileFilter() {

	    public String getDescription() {
		return "Preset (*.preset)";
	    }

	    public boolean accept(File f) {
		if (f.isDirectory()) {
		    return true;
		} else {
		    String filename = f.getName().toLowerCase();
		    return filename.endsWith(".preset");
		}
	    }
	};
	guiStateSaveChooser.addChoosableFileFilter(ff);
	guiStateSaveChooser.setFileFilter(ff);
	guiStateSaveChooser.setSelectedFile(new File("rando_preset.preset"));
	if (guiStateSaveChooser.showDialog(PTCG1_UI.this, "Save") == JFileChooser.APPROVE_OPTION) {
	    saveCurrentGUIState(guiStateSaveChooser.getSelectedFile());
	}
    }//GEN-LAST:event_savePresetActionPerformed

    private void loadPresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadPresetActionPerformed
	// TODO add your handling code here:
	if (useLastPreset.isSelected() && lastPresetLocation != null && !lastPresetLocation.equals("")) {
	    loadGUIState(new File(lastPresetLocation));
	} else {

	    JFileChooser guiStateSaveChooser = new JFileChooser();
	    FileFilter ff = new FileFilter() {

		public String getDescription() {
		    return "Preset (*.preset)";
		}

		public boolean accept(File f) {
		    if (f.isDirectory()) {
			return true;
		    } else {
			String filename = f.getName().toLowerCase();
			return filename.endsWith(".preset");
		    }
		}
	    };
	    guiStateSaveChooser.addChoosableFileFilter(ff);
	    guiStateSaveChooser.setFileFilter(ff);
	    guiStateSaveChooser.setSelectedFile(new File("rando_preset.preset"));
	    if (guiStateSaveChooser.showDialog(PTCG1_UI.this, "Load") == JFileChooser.APPROVE_OPTION) {
		loadGUIState(guiStateSaveChooser.getSelectedFile());
		try {
		    lastPresetLocation = guiStateSaveChooser.getSelectedFile().getAbsolutePath();
		    useLastPreset.setToolTipText(lastPresetStartText + lastPresetLocation);
		    Files.write(lastPresetSettingSavefile, lastPresetLocation.getBytes());
		} catch (IOException ex) {
		    Logger.getLogger(PTCG1_UI.class.getName()).log(Level.SEVERE, null, ex);
		}
	    }
	}
    }//GEN-LAST:event_loadPresetActionPerformed

    private void startWithNoAnimationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startWithNoAnimationsActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_startWithNoAnimationsActionPerformed

    private void setMetronomeAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMetronomeAmountActionPerformed
	// TODO add your handling code here:
	if(setMetronomeAmount.isSelected())
	    metronomeAmount.setEnabled(true);
    }//GEN-LAST:event_setMetronomeAmountActionPerformed

    private void useLastPresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useLastPresetActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_useLastPresetActionPerformed

    private void changePromoCardsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePromoCardsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_changePromoCardsActionPerformed

    private void randomizeSetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomizeSetsActionPerformed
        // TODO add your handling code here:
	changePromoCards.setEnabled(randomizeSets.isSelected());
    }//GEN-LAST:event_randomizeSetsActionPerformed

    private void healthHighStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_healthHighStateChanged
        ((SpinnerNumberModel) healthLow.getModel()).setMaximum((Comparable) ((SpinnerNumberModel) (healthHigh.getModel())).getNumber());
    }//GEN-LAST:event_healthHighStateChanged

    private void healthLowStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_healthLowStateChanged
        ((SpinnerNumberModel) healthHigh.getModel()).setMinimum((Comparable) ((SpinnerNumberModel) (healthLow.getModel())).getNumber());
    }//GEN-LAST:event_healthLowStateChanged

    private void randomizeDecksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomizeDecksActionPerformed
        // TODO add your handling code here:
        preserveStarterDecks.setEnabled(randomizeDecks.isSelected());
    }//GEN-LAST:event_randomizeDecksActionPerformed

    private void randomizeHealthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomizeHealthActionPerformed
        // TODO add your handling code here:
	healthLow.setEnabled(randomizeHealth.isSelected());
	healthHigh.setEnabled(randomizeHealth.isSelected());
	allowGlitchHPs.setEnabled(randomizeHealth.isSelected());
    }//GEN-LAST:event_randomizeHealthActionPerformed

    private void dontChangeMetronomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dontChangeMetronomeActionPerformed
        // TODO add your handling code here:
	if(dontChangeMetronome.isSelected()){
	    metronomeAmount.setEnabled(false);
	}
    }//GEN-LAST:event_dontChangeMetronomeActionPerformed

    private void deleteMetronomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMetronomeActionPerformed
        // TODO add your handling code here:
	if(deleteMetronome.isSelected()){
	    metronomeAmount.setEnabled(false);
	}
    }//GEN-LAST:event_deleteMetronomeActionPerformed

    public void saveRom() {

	PTCG1_Randomizer rando = new PTCG1_Randomizer(gameFile, textSeed.getText());
	textSeed.setText(rando.randSeed);

	//prepatch stuff here
	if (deleteInvisibleWall.isSelected()) {
	    rando.deleteInvisibleWallMove();
	}

	if (setMetronomeAmount.isSelected()) {
	    try {
		rando.setMetronomeAmount(Integer.parseInt(metronomeAmount.getText()));
	    } catch (NumberFormatException e) {
		JOptionPane.showMessageDialog(null, "Error: Metronome Amount Not An Integer.");
	    }
	} else if (deleteMetronome.isSelected()) {
	    rando.setMetronomeAmount(0);
	}

	if (sanquiTutorialPatch.isSelected()) {
	    rando.SanquiRemoveTutorialFromRom();
	}
	if (startWithInstantText.isSelected()) {
	    rando.setInstantText();
	}
	if (startWithNoAnimations.isSelected()) {
	    rando.setAnimationsOff();
	}

	if (movesCostNothing.isSelected()) {
	    rando.setAllEnergyToColorless(true);
	} else if (movesCostColorless.isSelected()) {
	    rando.setAllEnergyToColorless(false);
	}

	//Random stuff here
	if (randomizeWarps.isSelected()) {
	    rando.randomizeWarps();
	}

	if (randomizeHealth.isSelected()) {
	    rando.randomizeHP((Integer) ((SpinnerNumberModel) healthLow.getModel()).getNumber(), (Integer) ((SpinnerNumberModel) healthHigh.getModel()).getNumber(), allowGlitchHPs.isSelected());
	}
	if (randomizeDecks.isSelected()) {
	    rando.randomizeDeckPointersInRom(preserveStarterDecks.isSelected());
	}
	if (randomizeSets.isSelected()) {
	    rando.randomizeAllSets(changePromoCards.isSelected());
	}
	if (randomizeRetreatCost.isSelected()) {
	    rando.randomizeRetreatCosts();
	}
	if (randomizeWeakness.isSelected()) {
	    rando.randomizeWeakness();
	}
	if (randomizeResistance.isSelected()) {
	    rando.randomizeResistance();
	}
	if (randomizePokemonTypes.isSelected()) {
	    rando.randomizeTypes();
	}

	// Has to go after type randomization, before HP Fix though
	if (randomizeEvolutions.isSelected()) {
	    String maxSize = maxEvolutionChainValue.getText();
	    if (!maxSize.matches("[0-9]+")) {
		maxSize = "999";
	    }

	    rando.randomizeEvolutions(Integer.parseInt(maxSize), keepEvolutionsMonotype.isSelected());
	}

	if (evosHaveMoreHP.isSelected()) {

	    if (!rando.fixHPForChains()) {
		JOptionPane.showMessageDialog(null, "Error while Fixing HP chains. Please send seed to Aroymart.");
	    }

	}

	//goes after evolution randomization
	if (randomizeMovesInStages.isSelected()) {
	    rando.randomizeMoves(true, false);
	} else if (randomizeMovesFully.isSelected()) {
	    rando.randomizeMoves(false, false);
	}

	// THIS MUST GO AFTER TYPE AND MOVE RANDOMIZATION
	if (movesCostSameAsType.isSelected()) {
	    rando.setMoveTypeToMonType();
	}

	//This doesn't need to be before anything atm, but it has to go after randomized retreat costs
	if (removeRetreatCost.isSelected()) {
	    rando.removeRetreatCost();
	}

	fc.setSelectedFile(new File("TCG Randomized.gbc"));
	fc.showDialog(PTCG1_UI.this, "Save");

	String romLoc = fc.getSelectedFile().getAbsolutePath();
	if (romLoc.endsWith(".gbc")) {
	    romLoc += ".gbc";
	}

	rando.saveRom(fc.getSelectedFile().getAbsolutePath());

	//note: add check to see if it saved properly
	JOptionPane.showMessageDialog(null, "Finished Saving Rom.");

    }

    public void saveCurrentGUIState(File file) {
	String finalSave = "v1.0\n";
	finalSave += formatForSave("mrmime", deleteInvisibleWall);
	finalSave += formatForSave("dontChangeMetronome", dontChangeMetronome);
	finalSave += formatForSave("deleteMetronome", deleteMetronome);
	finalSave += formatForSave("setMetronomeAmount", setMetronomeAmount);
	finalSave += formatForSave("metronomeAmount", metronomeAmount);
	finalSave += formatForSave("movesCostSame", movesCostSame);
	finalSave += formatForSave("movesCostColorless", movesCostColorless);
	finalSave += formatForSave("movesCostNothing", movesCostNothing);
	finalSave += formatForSave("removeRetreatCost", removeRetreatCost);
	finalSave += formatForSave("sanquiTutorialPatch", sanquiTutorialPatch);
	finalSave += formatForSave("startWithInstantText", startWithInstantText);
	finalSave += formatForSave("startWithNoAnimations", startWithNoAnimations);
	finalSave += formatForSave("healthLow", healthLow);
	finalSave += formatForSave("healthHigh", healthHigh);
	finalSave += formatForSave("evosHaveMoreHP", evosHaveMoreHP);
	finalSave += formatForSave("allowGlitchHPs", allowGlitchHPs);
	finalSave += formatForSave("randomizeHealth", randomizeHealth);
	finalSave += formatForSave("randomizeWeakness", randomizeWeakness);
	finalSave += formatForSave("randomizeRetreatCost", randomizeRetreatCost);
	finalSave += formatForSave("randomizeSets", randomizeSets);
	finalSave += formatForSave("randomizeResistance", randomizeResistance);
	finalSave += formatForSave("randomizePokemonTypes", randomizePokemonTypes);
	finalSave += formatForSave("dontRandomizeMoves", dontRandomizeMoves);
	finalSave += formatForSave("randomizeMovesInStages", randomizeMovesInStages);
	finalSave += formatForSave("randomizeMovesFully", randomizeMovesFully);
	finalSave += formatForSave("movesCostSameAsType", movesCostSameAsType);
	finalSave += formatForSave("randomizeDecks", randomizeDecks);
	finalSave += formatForSave("preserveStarterDecks", preserveStarterDecks);
	finalSave += formatForSave("randomizeWarps", randomizeWarps);
	finalSave += formatForSave("randomizeEvolutions", randomizeEvolutions);
	finalSave += formatForSave("keepEvolutionsMonotype", keepEvolutionsMonotype);
	finalSave += formatForSave("setMaxEvolutionChain", setMaxEvolutionChain);
	finalSave += formatForSave("maxEvolutionChainValue", maxEvolutionChainValue);
	finalSave += formatForSave("changePromoCards", changePromoCards);
	try {
	    PrintWriter out = new PrintWriter(file);
	    out.print(finalSave);
	    out.close();
	    JOptionPane.showMessageDialog(null, "Preset saved to " + file.getAbsolutePath());
	} catch (FileNotFoundException ex) {
	    Logger.getLogger(PTCG1_UI.class.getName()).log(Level.SEVERE, null, ex);
	}
    }

    public void loadGUIState(File file) {
	if (Files.exists(file.toPath())) {
	    String data = "";
	    try {
		data = new String(Files.readAllBytes(file.toPath()));
	    } catch (IOException ex) {
		Logger.getLogger(PTCG1_UI.class.getName()).log(Level.SEVERE, null, ex);
	    }
	    loadFromSave("mrmime", deleteInvisibleWall, data);
	    loadFromSave("dontChangeMetronome", dontChangeMetronome, data);
	    loadFromSave("deleteMetronome", deleteMetronome, data);
	    loadFromSave("setMetronomeAmount", setMetronomeAmount, data);
	    loadFromSave("metronomeAmount", metronomeAmount, data);
	    loadFromSave("movesCostSame", movesCostSame, data);
	    loadFromSave("movesCostColorless", movesCostColorless, data);
	    loadFromSave("movesCostNothing", movesCostNothing, data);
	    loadFromSave("removeRetreatCost", removeRetreatCost, data);
	    loadFromSave("sanquiTutorialPatch", sanquiTutorialPatch, data);
	    loadFromSave("startWithInstantText", startWithInstantText, data);
	    loadFromSave("startWithNoAnimations", startWithNoAnimations, data);
	    loadFromSave("healthLow", healthLow, data);
	    loadFromSave("healthHigh", healthHigh, data);
	    loadFromSave("evosHaveMoreHP", evosHaveMoreHP, data);
	    loadFromSave("allowGlitchHPs", allowGlitchHPs, data);
	    loadFromSave("randomizeHealth", randomizeHealth, data);
	    loadFromSave("randomizeWeakness", randomizeWeakness, data);
	    loadFromSave("randomizeRetreatCost", randomizeRetreatCost, data);
	    loadFromSave("randomizeSets", randomizeSets, data);
	    loadFromSave("randomizeResistance", randomizeResistance, data);
	    loadFromSave("randomizePokemonTypes", randomizePokemonTypes, data);
	    loadFromSave("dontRandomizeMoves", dontRandomizeMoves, data);
	    loadFromSave("randomizeMovesInStages", randomizeMovesInStages, data);
	    loadFromSave("randomizeMovesFully", randomizeMovesFully, data);
	    loadFromSave("movesCostSameAsType", movesCostSameAsType, data);
	    loadFromSave("randomizeDecks", randomizeDecks, data);
	    loadFromSave("preserveStarterDecks", preserveStarterDecks, data);
	    loadFromSave("randomizeWarps", randomizeWarps, data);
	    loadFromSave("randomizeEvolutions", randomizeEvolutions, data);
	    loadFromSave("keepEvolutionsMonotype", keepEvolutionsMonotype, data);
	    loadFromSave("setMaxEvolutionChain", setMaxEvolutionChain, data);
	    loadFromSave("maxEvolutionChainValue", maxEvolutionChainValue, data);
	    loadFromSave("changePromoCards", changePromoCards, data);
	} else {
	    JOptionPane.showMessageDialog(null, "File does not exist, can't load settings");
	}
    }

    private String formatForSave(String name, Object uiObj) {
	String ret = name + ":";

	if (uiObj instanceof javax.swing.JCheckBox) {
	    ret += ((javax.swing.JCheckBox) uiObj).isSelected();
	} else if (uiObj instanceof javax.swing.JSpinner) {
	    var obj = (javax.swing.JSpinner) uiObj;
	    ret += (Integer) ((SpinnerNumberModel) obj.getModel()).getNumber();
	} else if (uiObj instanceof javax.swing.JRadioButton) {
	    ret += ((javax.swing.JRadioButton) uiObj).isSelected();
	} else if (uiObj instanceof javax.swing.JTextField) {
	    ret += ((javax.swing.JTextField) uiObj).getText();
	} else {
	    JOptionPane.showMessageDialog(null, "Error: " + name + "'s object is not supported");
	}

	return ret + "\n";
    }

    private void loadFromSave(String name, Object uiObj, String data) {
	int nameLoc = data.indexOf(name);
	if (nameLoc < 0) {
	    JOptionPane.showMessageDialog(null, "Error: " + name + " could not be found");
	    return;
	}
	String settingString = data.substring(nameLoc + name.length() + 1, data.indexOf("\n", nameLoc));

	if (uiObj instanceof javax.swing.JCheckBox) {
	    var obj = ((javax.swing.JCheckBox) uiObj);
	    obj.setSelected(Boolean.parseBoolean(settingString));
	    for (ActionListener b : obj.getActionListeners()){
		b.actionPerformed(null);
	    }
	} else if (uiObj instanceof javax.swing.JSpinner) {
	    var obj = (javax.swing.JSpinner) uiObj;
	    ((SpinnerNumberModel) obj.getModel()).setValue(Integer.parseInt(settingString));
	} else if (uiObj instanceof javax.swing.JRadioButton) {
	    var obj = ((javax.swing.JRadioButton) uiObj);
	    obj.setSelected(Boolean.parseBoolean(settingString));
	    for (ActionListener b : obj.getActionListeners()){
		b.actionPerformed(null);
	    }
	} else if (uiObj instanceof javax.swing.JTextField) {
	    ((javax.swing.JTextField) uiObj).setText(settingString);
	} else {
	    JOptionPane.showMessageDialog(null, "Error: " + name + "'s object is not supported");
	}

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allowGlitchHPs;
    private javax.swing.JCheckBox changePromoCards;
    private javax.swing.JCheckBox deleteInvisibleWall;
    private javax.swing.JRadioButton deleteMetronome;
    private javax.swing.JRadioButton dontChangeMetronome;
    private javax.swing.JRadioButton dontRandomizeMoves;
    private javax.swing.JCheckBox evosHaveMoreHP;
    private javax.swing.JSpinner healthHigh;
    private javax.swing.JSpinner healthLow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JCheckBox keepEvolutionsMonotype;
    private javax.swing.JButton loadPreset;
    private javax.swing.JTextField maxEvolutionChainValue;
    private javax.swing.JTextField metronomeAmount;
    private javax.swing.ButtonGroup metronomeMoves;
    private javax.swing.ButtonGroup moveCost_buttons;
    private javax.swing.JRadioButton movesCostColorless;
    private javax.swing.JRadioButton movesCostNothing;
    private javax.swing.JRadioButton movesCostSame;
    private javax.swing.JCheckBox movesCostSameAsType;
    private javax.swing.JPanel prepatch_panel;
    private javax.swing.JCheckBox preserveStarterDecks;
    private javax.swing.JCheckBox randomizeDecks;
    private javax.swing.JCheckBox randomizeEvolutions;
    private javax.swing.JCheckBox randomizeHealth;
    private javax.swing.JRadioButton randomizeMovesFully;
    private javax.swing.ButtonGroup randomizeMovesGroup;
    private javax.swing.JRadioButton randomizeMovesInStages;
    private javax.swing.JCheckBox randomizePokemonTypes;
    private javax.swing.JCheckBox randomizeResistance;
    private javax.swing.JCheckBox randomizeRetreatCost;
    private javax.swing.JCheckBox randomizeSets;
    private javax.swing.JCheckBox randomizeWarps;
    private javax.swing.JCheckBox randomizeWeakness;
    private javax.swing.JPanel randomize_panel;
    private javax.swing.JCheckBox removeRetreatCost;
    private javax.swing.JCheckBox sanquiTutorialPatch;
    private javax.swing.JButton savePreset;
    private javax.swing.JButton saveRom;
    private javax.swing.JCheckBox setMaxEvolutionChain;
    private javax.swing.JRadioButton setMetronomeAmount;
    private javax.swing.JCheckBox startWithInstantText;
    private javax.swing.JCheckBox startWithNoAnimations;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTextField textSeed;
    private javax.swing.JCheckBox useLastPreset;
    // End of variables declaration//GEN-END:variables
}
